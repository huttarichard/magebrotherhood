/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Promoter {
  export type AccountStruct = {
    enabled: boolean;
    name: string;
    shares: BigNumberish;
    code: string;
    revenue: BigNumberish;
    reward: BigNumberish;
    lastRewardBlock: BigNumberish;
  };

  export type AccountStructOutput = [
    boolean,
    string,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    enabled: boolean;
    name: string;
    shares: number;
    code: string;
    revenue: BigNumber;
    reward: BigNumber;
    lastRewardBlock: BigNumber;
  };
}

export interface PromoterInterface extends utils.Interface {
  contractName: "Promoter";
  functions: {
    "ADMIN()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DEFAULT_SHARES()": FunctionFragment;
    "MANAGER()": FunctionFragment;
    "MAX_SHARES()": FunctionFragment;
    "addRevenue(address,uint256)": FunctionFragment;
    "addRevenueByCode(string,uint256)": FunctionFragment;
    "allowContract(address)": FunctionFragment;
    "coin()": FunctionFragment;
    "exchange()": FunctionFragment;
    "getAccountByCode(string)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "promoters(address)": FunctionFragment;
    "promotersbyCode(string)": FunctionFragment;
    "register(string,string)": FunctionFragment;
    "release(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setCoinContract(address)": FunctionFragment;
    "setPromoter(address,(bool,string,uint8,string,uint256,uint256,uint256))": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_SHARES",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MANAGER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_SHARES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRevenue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addRevenueByCode",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowContract",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "coin", values?: undefined): string;
  encodeFunctionData(functionFragment: "exchange", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAccountByCode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "promoters", values: [string]): string;
  encodeFunctionData(
    functionFragment: "promotersbyCode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "release", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoinContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPromoter",
    values: [string, Promoter.AccountStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_SHARES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MANAGER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAX_SHARES", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addRevenue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRevenueByCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountByCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "promoters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "promotersbyCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCoinContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPromoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "Paid(address,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "Registered(address,tuple)": EventFragment;
    "Rewarded(address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Updated(address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Paid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Registered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rewarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Updated"): EventFragment;
}

export type PaidEvent = TypedEvent<
  [string, BigNumber],
  { promoter: string; bhc: BigNumber }
>;

export type PaidEventFilter = TypedEventFilter<PaidEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RegisteredEvent = TypedEvent<
  [string, Promoter.AccountStructOutput],
  { promoter: string; account: Promoter.AccountStructOutput }
>;

export type RegisteredEventFilter = TypedEventFilter<RegisteredEvent>;

export type RewardedEvent = TypedEvent<
  [string, BigNumber],
  { promoter: string; eth: BigNumber }
>;

export type RewardedEventFilter = TypedEventFilter<RewardedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type UpdatedEvent = TypedEvent<
  [string, Promoter.AccountStructOutput],
  { promoter: string; account: Promoter.AccountStructOutput }
>;

export type UpdatedEventFilter = TypedEventFilter<UpdatedEvent>;

export interface Promoter extends BaseContract {
  contractName: "Promoter";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PromoterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_SHARES(overrides?: CallOverrides): Promise<[number]>;

    MANAGER(overrides?: CallOverrides): Promise<[string]>;

    MAX_SHARES(overrides?: CallOverrides): Promise<[number]>;

    addRevenue(
      promoter: string,
      ethRevenue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRevenueByCode(
      code: string,
      ethRevenue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowContract(
      kontrakt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    coin(overrides?: CallOverrides): Promise<[string]>;

    exchange(overrides?: CallOverrides): Promise<[string]>;

    getAccountByCode(
      code: string,
      overrides?: CallOverrides
    ): Promise<
      [Promoter.AccountStructOutput] & { account: Promoter.AccountStructOutput }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    promoters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, number, string, BigNumber, BigNumber, BigNumber] & {
        enabled: boolean;
        name: string;
        shares: number;
        code: string;
        revenue: BigNumber;
        reward: BigNumber;
        lastRewardBlock: BigNumber;
      }
    >;

    promotersbyCode(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    register(
      code: string,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    release(
      promoter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCoinContract(
      _coin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPromoter(
      promoter: string,
      account: Promoter.AccountStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_SHARES(overrides?: CallOverrides): Promise<number>;

  MANAGER(overrides?: CallOverrides): Promise<string>;

  MAX_SHARES(overrides?: CallOverrides): Promise<number>;

  addRevenue(
    promoter: string,
    ethRevenue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRevenueByCode(
    code: string,
    ethRevenue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowContract(
    kontrakt: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  coin(overrides?: CallOverrides): Promise<string>;

  exchange(overrides?: CallOverrides): Promise<string>;

  getAccountByCode(
    code: string,
    overrides?: CallOverrides
  ): Promise<Promoter.AccountStructOutput>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  promoters(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, number, string, BigNumber, BigNumber, BigNumber] & {
      enabled: boolean;
      name: string;
      shares: number;
      code: string;
      revenue: BigNumber;
      reward: BigNumber;
      lastRewardBlock: BigNumber;
    }
  >;

  promotersbyCode(arg0: string, overrides?: CallOverrides): Promise<string>;

  register(
    code: string,
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  release(
    promoter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCoinContract(
    _coin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPromoter(
    promoter: string,
    account: Promoter.AccountStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_SHARES(overrides?: CallOverrides): Promise<number>;

    MANAGER(overrides?: CallOverrides): Promise<string>;

    MAX_SHARES(overrides?: CallOverrides): Promise<number>;

    addRevenue(
      promoter: string,
      ethRevenue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addRevenueByCode(
      code: string,
      ethRevenue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowContract(kontrakt: string, overrides?: CallOverrides): Promise<void>;

    coin(overrides?: CallOverrides): Promise<string>;

    exchange(overrides?: CallOverrides): Promise<string>;

    getAccountByCode(
      code: string,
      overrides?: CallOverrides
    ): Promise<Promoter.AccountStructOutput>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    promoters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, number, string, BigNumber, BigNumber, BigNumber] & {
        enabled: boolean;
        name: string;
        shares: number;
        code: string;
        revenue: BigNumber;
        reward: BigNumber;
        lastRewardBlock: BigNumber;
      }
    >;

    promotersbyCode(arg0: string, overrides?: CallOverrides): Promise<string>;

    register(
      code: string,
      name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    release(promoter: string, overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCoinContract(_coin: string, overrides?: CallOverrides): Promise<void>;

    setPromoter(
      promoter: string,
      account: Promoter.AccountStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Paid(address,uint256)"(
      promoter?: string | null,
      bhc?: null
    ): PaidEventFilter;
    Paid(promoter?: string | null, bhc?: null): PaidEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Registered(address,tuple)"(
      promoter?: string | null,
      account?: null
    ): RegisteredEventFilter;
    Registered(promoter?: string | null, account?: null): RegisteredEventFilter;

    "Rewarded(address,uint256)"(
      promoter?: string | null,
      eth?: null
    ): RewardedEventFilter;
    Rewarded(promoter?: string | null, eth?: null): RewardedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Updated(address,tuple)"(
      promoter?: string | null,
      account?: null
    ): UpdatedEventFilter;
    Updated(promoter?: string | null, account?: null): UpdatedEventFilter;
  };

  estimateGas: {
    ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

    addRevenue(
      promoter: string,
      ethRevenue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRevenueByCode(
      code: string,
      ethRevenue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowContract(
      kontrakt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    coin(overrides?: CallOverrides): Promise<BigNumber>;

    exchange(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountByCode(
      code: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    promoters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    promotersbyCode(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      code: string,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    release(
      promoter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCoinContract(
      _coin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPromoter(
      promoter: string,
      account: Promoter.AccountStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_SHARES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_SHARES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRevenue(
      promoter: string,
      ethRevenue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRevenueByCode(
      code: string,
      ethRevenue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowContract(
      kontrakt: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    coin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountByCode(
      code: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    promoters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    promotersbyCode(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      code: string,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    release(
      promoter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCoinContract(
      _coin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPromoter(
      promoter: string,
      account: Promoter.AccountStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
