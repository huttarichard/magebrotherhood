/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IExchangeInterface extends utils.Interface {
  contractName: "IExchange";
  functions: {
    "ethToTokenSwap()": FunctionFragment;
    "ethToTokenSwapInput(uint256,uint256)": FunctionFragment;
    "ethToTokenSwapOutput(uint256,uint256)": FunctionFragment;
    "ethToTokenTransferInput(uint256,uint256,address)": FunctionFragment;
    "ethToTokenTransferOutput(uint256,uint256,address)": FunctionFragment;
    "getEthToTokenInputPrice(uint256)": FunctionFragment;
    "getEthToTokenOutputPrice(uint256)": FunctionFragment;
    "getTokenToEthInputPrice(uint256)": FunctionFragment;
    "getTokenToEthInputPriceWithTax(uint256)": FunctionFragment;
    "getTokenToEthOutputPrice(uint256)": FunctionFragment;
    "getTokenToEthOutputPriceWithTax(uint256)": FunctionFragment;
    "tokenToEthSwap(uint256)": FunctionFragment;
    "tokenToEthSwapInput(uint256,uint256,uint256)": FunctionFragment;
    "tokenToEthSwapOutput(uint256,uint256,uint256)": FunctionFragment;
    "tokenToEthTransferInput(uint256,uint256,uint256,address)": FunctionFragment;
    "tokenToEthTransferOutput(uint256,uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ethToTokenSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethToTokenSwapInput",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ethToTokenSwapOutput",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ethToTokenTransferInput",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ethToTokenTransferOutput",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthToTokenInputPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthToTokenOutputPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenToEthInputPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenToEthInputPriceWithTax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenToEthOutputPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenToEthOutputPriceWithTax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToEthSwap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToEthSwapInput",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToEthSwapOutput",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToEthTransferInput",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToEthTransferOutput",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "ethToTokenSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethToTokenSwapInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethToTokenSwapOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethToTokenTransferInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethToTokenTransferOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthToTokenInputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthToTokenOutputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenToEthInputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenToEthInputPriceWithTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenToEthOutputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenToEthOutputPriceWithTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToEthSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToEthSwapInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToEthSwapOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToEthTransferInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToEthTransferOutput",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IExchange extends BaseContract {
  contractName: "IExchange";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ethToTokenSwap(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethToTokenSwapInput(
      minTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethToTokenSwapOutput(
      tokensBought: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethToTokenTransferInput(
      minTokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethToTokenTransferOutput(
      tokensBought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEthToTokenInputPrice(
      ethSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEthToTokenOutputPrice(
      tokensBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenToEthInputPrice(
      tokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenToEthInputPriceWithTax(
      tokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTokenToEthOutputPrice(
      ethBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenToEthOutputPriceWithTax(
      ethBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    tokenToEthSwap(
      tokensSold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenToEthSwapInput(
      tokensSold: BigNumberish,
      minEth: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenToEthSwapOutput(
      ethBought: BigNumberish,
      maxTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenToEthTransferInput(
      tokensSold: BigNumberish,
      minEth: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenToEthTransferOutput(
      ethBought: BigNumberish,
      maxTokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ethToTokenSwap(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethToTokenSwapInput(
    minTokens: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethToTokenSwapOutput(
    tokensBought: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethToTokenTransferInput(
    minTokens: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethToTokenTransferOutput(
    tokensBought: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEthToTokenInputPrice(
    ethSold: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEthToTokenOutputPrice(
    tokensBought: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenToEthInputPrice(
    tokensSold: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenToEthInputPriceWithTax(
    tokensSold: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getTokenToEthOutputPrice(
    ethBought: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenToEthOutputPriceWithTax(
    ethBought: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  tokenToEthSwap(
    tokensSold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenToEthSwapInput(
    tokensSold: BigNumberish,
    minEth: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenToEthSwapOutput(
    ethBought: BigNumberish,
    maxTokens: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenToEthTransferInput(
    tokensSold: BigNumberish,
    minEth: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenToEthTransferOutput(
    ethBought: BigNumberish,
    maxTokens: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ethToTokenSwap(overrides?: CallOverrides): Promise<BigNumber>;

    ethToTokenSwapInput(
      minTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethToTokenSwapOutput(
      tokensBought: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethToTokenTransferInput(
      minTokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethToTokenTransferOutput(
      tokensBought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthToTokenInputPrice(
      ethSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthToTokenOutputPrice(
      tokensBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToEthInputPrice(
      tokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToEthInputPriceWithTax(
      tokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTokenToEthOutputPrice(
      ethBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToEthOutputPriceWithTax(
      ethBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    tokenToEthSwap(
      tokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToEthSwapInput(
      tokensSold: BigNumberish,
      minEth: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToEthSwapOutput(
      ethBought: BigNumberish,
      maxTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToEthTransferInput(
      tokensSold: BigNumberish,
      minEth: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToEthTransferOutput(
      ethBought: BigNumberish,
      maxTokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    ethToTokenSwap(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethToTokenSwapInput(
      minTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethToTokenSwapOutput(
      tokensBought: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethToTokenTransferInput(
      minTokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethToTokenTransferOutput(
      tokensBought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEthToTokenInputPrice(
      ethSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthToTokenOutputPrice(
      tokensBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToEthInputPrice(
      tokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToEthInputPriceWithTax(
      tokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToEthOutputPrice(
      ethBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToEthOutputPriceWithTax(
      ethBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToEthSwap(
      tokensSold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenToEthSwapInput(
      tokensSold: BigNumberish,
      minEth: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenToEthSwapOutput(
      ethBought: BigNumberish,
      maxTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenToEthTransferInput(
      tokensSold: BigNumberish,
      minEth: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenToEthTransferOutput(
      ethBought: BigNumberish,
      maxTokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ethToTokenSwap(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethToTokenSwapInput(
      minTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethToTokenSwapOutput(
      tokensBought: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethToTokenTransferInput(
      minTokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethToTokenTransferOutput(
      tokensBought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEthToTokenInputPrice(
      ethSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthToTokenOutputPrice(
      tokensBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenToEthInputPrice(
      tokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenToEthInputPriceWithTax(
      tokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenToEthOutputPrice(
      ethBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenToEthOutputPriceWithTax(
      ethBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToEthSwap(
      tokensSold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenToEthSwapInput(
      tokensSold: BigNumberish,
      minEth: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenToEthSwapOutput(
      ethBought: BigNumberish,
      maxTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenToEthTransferInput(
      tokensSold: BigNumberish,
      minEth: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenToEthTransferOutput(
      ethBought: BigNumberish,
      maxTokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
