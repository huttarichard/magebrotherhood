/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ExchangeInterface extends utils.Interface {
  contractName: "Exchange";
  functions: {
    "coin()": FunctionFragment;
    "destruct(address)": FunctionFragment;
    "ethToTokenSwap()": FunctionFragment;
    "ethToTokenSwapInput(uint256,uint256)": FunctionFragment;
    "ethToTokenSwapOutput(uint256,uint256)": FunctionFragment;
    "ethToTokenTransferInput(uint256,uint256,address)": FunctionFragment;
    "ethToTokenTransferOutput(uint256,uint256,address)": FunctionFragment;
    "getEthToTokenInputPrice(uint256)": FunctionFragment;
    "getEthToTokenOutputPrice(uint256)": FunctionFragment;
    "getTokenToEthInputPrice(uint256)": FunctionFragment;
    "getTokenToEthInputPriceWithTax(uint256)": FunctionFragment;
    "getTokenToEthOutputPrice(uint256)": FunctionFragment;
    "getTokenToEthOutputPriceWithTax(uint256)": FunctionFragment;
    "liqudityGuard()": FunctionFragment;
    "liqudityGuardDenominator()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserves()": FunctionFragment;
    "setLiqudityGuard(uint256,uint256)": FunctionFragment;
    "setTaxFee(uint256,uint256)": FunctionFragment;
    "taxFee()": FunctionFragment;
    "taxFeeDenominator()": FunctionFragment;
    "tokenToEthSwap(uint256)": FunctionFragment;
    "tokenToEthSwapInput(uint256,uint256,uint256)": FunctionFragment;
    "tokenToEthSwapOutput(uint256,uint256,uint256)": FunctionFragment;
    "tokenToEthTransferInput(uint256,uint256,uint256,address)": FunctionFragment;
    "tokenToEthTransferOutput(uint256,uint256,uint256,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "coin", values?: undefined): string;
  encodeFunctionData(functionFragment: "destruct", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ethToTokenSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethToTokenSwapInput",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ethToTokenSwapOutput",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ethToTokenTransferInput",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ethToTokenTransferOutput",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthToTokenInputPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthToTokenOutputPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenToEthInputPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenToEthInputPriceWithTax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenToEthOutputPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenToEthOutputPriceWithTax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liqudityGuard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liqudityGuardDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reserves", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setLiqudityGuard",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "taxFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "taxFeeDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToEthSwap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToEthSwapInput",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToEthSwapOutput",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToEthTransferInput",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToEthTransferOutput",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "coin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "destruct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethToTokenSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethToTokenSwapInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethToTokenSwapOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethToTokenTransferInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethToTokenTransferOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthToTokenInputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthToTokenOutputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenToEthInputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenToEthInputPriceWithTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenToEthOutputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenToEthOutputPriceWithTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liqudityGuard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liqudityGuardDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserves", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiqudityGuard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTaxFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taxFeeDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToEthSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToEthSwapInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToEthSwapOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToEthTransferInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToEthTransferOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "Bought(address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Deposit(address,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Sold(address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type BoughtEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    buyer: string;
    recipient: string;
    timestamp: BigNumber;
    tokensBought: BigNumber;
    ethSold: BigNumber;
    tokenReserve: BigNumber;
    ethReserve: BigNumber;
  }
>;

export type BoughtEventFilter = TypedEventFilter<BoughtEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    depositer: string;
    timestamp: BigNumber;
    ethAdded: BigNumber;
    tokenReserve: BigNumber;
    ethReserve: BigNumber;
  }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type SoldEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    seller: string;
    recipient: string;
    timestamp: BigNumber;
    tokensSold: BigNumber;
    ethBought: BigNumber;
    tokenReserve: BigNumber;
    ethReserve: BigNumber;
  }
>;

export type SoldEventFilter = TypedEventFilter<SoldEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Exchange extends BaseContract {
  contractName: "Exchange";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    coin(overrides?: CallOverrides): Promise<[string]>;

    destruct(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethToTokenSwap(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethToTokenSwapInput(
      minTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethToTokenSwapOutput(
      tokensBought: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethToTokenTransferInput(
      minTokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethToTokenTransferOutput(
      tokensBought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEthToTokenInputPrice(
      ethSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEthToTokenOutputPrice(
      tokensBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenToEthInputPrice(
      tokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenToEthInputPriceWithTax(
      tokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTokenToEthOutputPrice(
      ethBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenToEthOutputPriceWithTax(
      ethBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    liqudityGuard(overrides?: CallOverrides): Promise<[BigNumber]>;

    liqudityGuardDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    setLiqudityGuard(
      _guard: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaxFee(
      _feePercent: BigNumberish,
      _taxFeeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taxFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    taxFeeDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenToEthSwap(
      tokensSold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenToEthSwapInput(
      tokensSold: BigNumberish,
      minEth: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenToEthSwapOutput(
      ethBought: BigNumberish,
      maxTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenToEthTransferInput(
      tokensSold: BigNumberish,
      minEth: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenToEthTransferOutput(
      ethBought: BigNumberish,
      maxTokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  coin(overrides?: CallOverrides): Promise<string>;

  destruct(
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethToTokenSwap(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethToTokenSwapInput(
    minTokens: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethToTokenSwapOutput(
    tokensBought: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethToTokenTransferInput(
    minTokens: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethToTokenTransferOutput(
    tokensBought: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEthToTokenInputPrice(
    ethSold: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEthToTokenOutputPrice(
    tokensBought: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenToEthInputPrice(
    tokensSold: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenToEthInputPriceWithTax(
    tokensSold: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getTokenToEthOutputPrice(
    ethBought: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenToEthOutputPriceWithTax(
    ethBought: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  liqudityGuard(overrides?: CallOverrides): Promise<BigNumber>;

  liqudityGuardDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  setLiqudityGuard(
    _guard: BigNumberish,
    _denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaxFee(
    _feePercent: BigNumberish,
    _taxFeeDenominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taxFee(overrides?: CallOverrides): Promise<BigNumber>;

  taxFeeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  tokenToEthSwap(
    tokensSold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenToEthSwapInput(
    tokensSold: BigNumberish,
    minEth: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenToEthSwapOutput(
    ethBought: BigNumberish,
    maxTokens: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenToEthTransferInput(
    tokensSold: BigNumberish,
    minEth: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenToEthTransferOutput(
    ethBought: BigNumberish,
    maxTokens: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    coin(overrides?: CallOverrides): Promise<string>;

    destruct(receiver: string, overrides?: CallOverrides): Promise<void>;

    ethToTokenSwap(overrides?: CallOverrides): Promise<BigNumber>;

    ethToTokenSwapInput(
      minTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethToTokenSwapOutput(
      tokensBought: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethToTokenTransferInput(
      minTokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethToTokenTransferOutput(
      tokensBought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthToTokenInputPrice(
      ethSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthToTokenOutputPrice(
      tokensBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToEthInputPrice(
      tokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToEthInputPriceWithTax(
      tokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTokenToEthOutputPrice(
      ethBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToEthOutputPriceWithTax(
      ethBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    liqudityGuard(overrides?: CallOverrides): Promise<BigNumber>;

    liqudityGuardDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    setLiqudityGuard(
      _guard: BigNumberish,
      _denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxFee(
      _feePercent: BigNumberish,
      _taxFeeDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    taxFee(overrides?: CallOverrides): Promise<BigNumber>;

    taxFeeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    tokenToEthSwap(
      tokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToEthSwapInput(
      tokensSold: BigNumberish,
      minEth: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToEthSwapOutput(
      ethBought: BigNumberish,
      maxTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToEthTransferInput(
      tokensSold: BigNumberish,
      minEth: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToEthTransferOutput(
      ethBought: BigNumberish,
      maxTokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Bought(address,address,uint256,uint256,uint256,uint256,uint256)"(
      buyer?: string | null,
      recipient?: string | null,
      timestamp?: BigNumberish | null,
      tokensBought?: null,
      ethSold?: null,
      tokenReserve?: null,
      ethReserve?: null
    ): BoughtEventFilter;
    Bought(
      buyer?: string | null,
      recipient?: string | null,
      timestamp?: BigNumberish | null,
      tokensBought?: null,
      ethSold?: null,
      tokenReserve?: null,
      ethReserve?: null
    ): BoughtEventFilter;

    "Deposit(address,uint256,uint256,uint256,uint256)"(
      depositer?: string | null,
      timestamp?: BigNumberish | null,
      ethAdded?: null,
      tokenReserve?: null,
      ethReserve?: null
    ): DepositEventFilter;
    Deposit(
      depositer?: string | null,
      timestamp?: BigNumberish | null,
      ethAdded?: null,
      tokenReserve?: null,
      ethReserve?: null
    ): DepositEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Sold(address,address,uint256,uint256,uint256,uint256,uint256)"(
      seller?: string | null,
      recipient?: string | null,
      timestamp?: BigNumberish | null,
      tokensSold?: null,
      ethBought?: null,
      tokenReserve?: null,
      ethReserve?: null
    ): SoldEventFilter;
    Sold(
      seller?: string | null,
      recipient?: string | null,
      timestamp?: BigNumberish | null,
      tokensSold?: null,
      ethBought?: null,
      tokenReserve?: null,
      ethReserve?: null
    ): SoldEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    coin(overrides?: CallOverrides): Promise<BigNumber>;

    destruct(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethToTokenSwap(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethToTokenSwapInput(
      minTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethToTokenSwapOutput(
      tokensBought: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethToTokenTransferInput(
      minTokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethToTokenTransferOutput(
      tokensBought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEthToTokenInputPrice(
      ethSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthToTokenOutputPrice(
      tokensBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToEthInputPrice(
      tokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToEthInputPriceWithTax(
      tokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToEthOutputPrice(
      ethBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToEthOutputPriceWithTax(
      ethBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liqudityGuard(overrides?: CallOverrides): Promise<BigNumber>;

    liqudityGuardDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserves(overrides?: CallOverrides): Promise<BigNumber>;

    setLiqudityGuard(
      _guard: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaxFee(
      _feePercent: BigNumberish,
      _taxFeeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taxFee(overrides?: CallOverrides): Promise<BigNumber>;

    taxFeeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    tokenToEthSwap(
      tokensSold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenToEthSwapInput(
      tokensSold: BigNumberish,
      minEth: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenToEthSwapOutput(
      ethBought: BigNumberish,
      maxTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenToEthTransferInput(
      tokensSold: BigNumberish,
      minEth: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenToEthTransferOutput(
      ethBought: BigNumberish,
      maxTokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    coin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    destruct(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethToTokenSwap(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethToTokenSwapInput(
      minTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethToTokenSwapOutput(
      tokensBought: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethToTokenTransferInput(
      minTokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethToTokenTransferOutput(
      tokensBought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEthToTokenInputPrice(
      ethSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthToTokenOutputPrice(
      tokensBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenToEthInputPrice(
      tokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenToEthInputPriceWithTax(
      tokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenToEthOutputPrice(
      ethBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenToEthOutputPriceWithTax(
      ethBought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liqudityGuard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liqudityGuardDenominator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setLiqudityGuard(
      _guard: BigNumberish,
      _denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaxFee(
      _feePercent: BigNumberish,
      _taxFeeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taxFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxFeeDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenToEthSwap(
      tokensSold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenToEthSwapInput(
      tokensSold: BigNumberish,
      minEth: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenToEthSwapOutput(
      ethBought: BigNumberish,
      maxTokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenToEthTransferInput(
      tokensSold: BigNumberish,
      minEth: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenToEthTransferOutput(
      ethBought: BigNumberish,
      maxTokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
