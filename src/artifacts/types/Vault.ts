/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VaultInterface extends utils.Interface {
  contractName: "Vault";
  functions: {
    "addRewardsForPeriods(uint16,uint16,uint256)": FunctionFragment;
    "batchUnstake(address,uint256[])": FunctionFragment;
    "claimRewards(uint16)": FunctionFragment;
    "coin()": FunctionFragment;
    "cycleLengthInSeconds()": FunctionFragment;
    "enabled()": FunctionFragment;
    "estimateRewards(uint16)": FunctionFragment;
    "getCurrentCycle()": FunctionFragment;
    "getCurrentPeriod()": FunctionFragment;
    "globalHistory(uint256)": FunctionFragment;
    "lastGlobalSnapshotIndex()": FunctionFragment;
    "lastStakerSnapshotIndex(address)": FunctionFragment;
    "nextClaims(address)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "periodLengthInCycles()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardsSchedule(uint256)": FunctionFragment;
    "stakerHistories(address,uint256)": FunctionFragment;
    "staking(address)": FunctionFragment;
    "start()": FunctionFragment;
    "startTimestamp()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalRewardsPool()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "unstake(address,uint256)": FunctionFragment;
    "withdrawLostCycleRewards(address,uint16,int256)": FunctionFragment;
    "withdrawnLostCycles(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRewardsForPeriods",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUnstake",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "coin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cycleLengthInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "enabled", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "estimateRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentCycle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastGlobalSnapshotIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastStakerSnapshotIndex",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "nextClaims", values: [string]): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodLengthInCycles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsSchedule",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerHistories",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "staking", values: [string]): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardsPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLostCycleRewards",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawnLostCycles",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addRewardsForPeriods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cycleLengthInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enabled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastGlobalSnapshotIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastStakerSnapshotIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextClaims", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodLengthInCycles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerHistories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardsPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLostCycleRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawnLostCycles",
    data: BytesLike
  ): Result;

  events: {
    "Disabled()": EventFragment;
    "HistoriesUpdated(address,uint256,uint256,uint256)": EventFragment;
    "NftStaked(address,uint256,address,uint256,uint256)": EventFragment;
    "NftUnstaked(address,uint256,address,uint256,uint256)": EventFragment;
    "NftsBatchStaked(address,uint256,address,uint256[],uint256[])": EventFragment;
    "NftsBatchUnstaked(address,uint256,address,uint256[],uint256[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RewardsAdded(uint256,uint256,uint256)": EventFragment;
    "RewardsClaimed(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Started()": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Disabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HistoriesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftUnstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftsBatchStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftsBatchUnstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Started"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type DisabledEvent = TypedEvent<[], {}>;

export type DisabledEventFilter = TypedEventFilter<DisabledEvent>;

export type HistoriesUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    staker: string;
    startCycle: BigNumber;
    stakerStake: BigNumber;
    globalStake: BigNumber;
  }
>;

export type HistoriesUpdatedEventFilter =
  TypedEventFilter<HistoriesUpdatedEvent>;

export type NftStakedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber],
  {
    staker: string;
    cycle: BigNumber;
    nft: string;
    tokenId: BigNumber;
    weight: BigNumber;
  }
>;

export type NftStakedEventFilter = TypedEventFilter<NftStakedEvent>;

export type NftUnstakedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber],
  {
    staker: string;
    cycle: BigNumber;
    nft: string;
    tokenId: BigNumber;
    weight: BigNumber;
  }
>;

export type NftUnstakedEventFilter = TypedEventFilter<NftUnstakedEvent>;

export type NftsBatchStakedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber[], BigNumber[]],
  {
    staker: string;
    cycle: BigNumber;
    nft: string;
    tokenIds: BigNumber[];
    weights: BigNumber[];
  }
>;

export type NftsBatchStakedEventFilter = TypedEventFilter<NftsBatchStakedEvent>;

export type NftsBatchUnstakedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber[], BigNumber[]],
  {
    staker: string;
    cycle: BigNumber;
    nft: string;
    tokenIds: BigNumber[];
    weights: BigNumber[];
  }
>;

export type NftsBatchUnstakedEventFilter =
  TypedEventFilter<NftsBatchUnstakedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RewardsAddedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { startPeriod: BigNumber; endPeriod: BigNumber; rewardsPerCycle: BigNumber }
>;

export type RewardsAddedEventFilter = TypedEventFilter<RewardsAddedEvent>;

export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    staker: string;
    cycle: BigNumber;
    startPeriod: BigNumber;
    periods: BigNumber;
    amount: BigNumber;
  }
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export type StartedEvent = TypedEvent<[], {}>;

export type StartedEventFilter = TypedEventFilter<StartedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Vault extends BaseContract {
  contractName: "Vault";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addRewardsForPeriods(
      startPeriod: BigNumberish,
      endPeriod: BigNumberish,
      rewardsPerCycle: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchUnstake(
      nft: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      maxPeriods: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    coin(overrides?: CallOverrides): Promise<[string]>;

    cycleLengthInSeconds(overrides?: CallOverrides): Promise<[number]>;

    enabled(overrides?: CallOverrides): Promise<[boolean]>;

    estimateRewards(
      maxPeriods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber] & {
        startPeriod: number;
        periods: number;
        amount: BigNumber;
      }
    >;

    getCurrentCycle(overrides?: CallOverrides): Promise<[number]>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<[number]>;

    globalHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { stake: BigNumber; startCycle: BigNumber }
    >;

    lastGlobalSnapshotIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastStakerSnapshotIndex(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nextClaims(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        period: number;
        globalSnapshotIndex: BigNumber;
        stakerSnapshotIndex: BigNumber;
      }
    >;

    onERC1155BatchReceived(
      arg0: string,
      from: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      from: string,
      id: BigNumberish,
      amount: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      from: string,
      id: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    periodLengthInCycles(overrides?: CallOverrides): Promise<[number]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardsSchedule(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakerHistories(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { stake: BigNumber; startCycle: BigNumber }
    >;

    staking(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { nft: string; enabled: boolean }>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalRewardsPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      nft: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLostCycleRewards(
      to: string,
      cycle: BigNumberish,
      globalSnapshotIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawnLostCycles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addRewardsForPeriods(
    startPeriod: BigNumberish,
    endPeriod: BigNumberish,
    rewardsPerCycle: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchUnstake(
    nft: string,
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    maxPeriods: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  coin(overrides?: CallOverrides): Promise<string>;

  cycleLengthInSeconds(overrides?: CallOverrides): Promise<number>;

  enabled(overrides?: CallOverrides): Promise<boolean>;

  estimateRewards(
    maxPeriods: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, BigNumber] & {
      startPeriod: number;
      periods: number;
      amount: BigNumber;
    }
  >;

  getCurrentCycle(overrides?: CallOverrides): Promise<number>;

  getCurrentPeriod(overrides?: CallOverrides): Promise<number>;

  globalHistory(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { stake: BigNumber; startCycle: BigNumber }
  >;

  lastGlobalSnapshotIndex(overrides?: CallOverrides): Promise<BigNumber>;

  lastStakerSnapshotIndex(
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nextClaims(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      period: number;
      globalSnapshotIndex: BigNumber;
      stakerSnapshotIndex: BigNumber;
    }
  >;

  onERC1155BatchReceived(
    arg0: string,
    from: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    from: string,
    id: BigNumberish,
    amount: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    from: string,
    id: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  periodLengthInCycles(overrides?: CallOverrides): Promise<number>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardsSchedule(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakerHistories(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { stake: BigNumber; startCycle: BigNumber }
  >;

  staking(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { nft: string; enabled: boolean }>;

  start(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalRewardsPool(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    nft: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLostCycleRewards(
    to: string,
    cycle: BigNumberish,
    globalSnapshotIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawnLostCycles(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addRewardsForPeriods(
      startPeriod: BigNumberish,
      endPeriod: BigNumberish,
      rewardsPerCycle: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    batchUnstake(
      nft: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(
      maxPeriods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    coin(overrides?: CallOverrides): Promise<string>;

    cycleLengthInSeconds(overrides?: CallOverrides): Promise<number>;

    enabled(overrides?: CallOverrides): Promise<boolean>;

    estimateRewards(
      maxPeriods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber] & {
        startPeriod: number;
        periods: number;
        amount: BigNumber;
      }
    >;

    getCurrentCycle(overrides?: CallOverrides): Promise<number>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<number>;

    globalHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { stake: BigNumber; startCycle: BigNumber }
    >;

    lastGlobalSnapshotIndex(overrides?: CallOverrides): Promise<BigNumber>;

    lastStakerSnapshotIndex(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextClaims(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        period: number;
        globalSnapshotIndex: BigNumber;
        stakerSnapshotIndex: BigNumber;
      }
    >;

    onERC1155BatchReceived(
      arg0: string,
      from: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      from: string,
      id: BigNumberish,
      amount: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      from: string,
      id: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    periodLengthInCycles(overrides?: CallOverrides): Promise<number>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardsSchedule(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakerHistories(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { stake: BigNumber; startCycle: BigNumber }
    >;

    staking(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { nft: string; enabled: boolean }>;

    start(overrides?: CallOverrides): Promise<void>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalRewardsPool(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unstake(
      nft: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLostCycleRewards(
      to: string,
      cycle: BigNumberish,
      globalSnapshotIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawnLostCycles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Disabled()"(): DisabledEventFilter;
    Disabled(): DisabledEventFilter;

    "HistoriesUpdated(address,uint256,uint256,uint256)"(
      staker?: null,
      startCycle?: null,
      stakerStake?: null,
      globalStake?: null
    ): HistoriesUpdatedEventFilter;
    HistoriesUpdated(
      staker?: null,
      startCycle?: null,
      stakerStake?: null,
      globalStake?: null
    ): HistoriesUpdatedEventFilter;

    "NftStaked(address,uint256,address,uint256,uint256)"(
      staker?: null,
      cycle?: null,
      nft?: null,
      tokenId?: null,
      weight?: null
    ): NftStakedEventFilter;
    NftStaked(
      staker?: null,
      cycle?: null,
      nft?: null,
      tokenId?: null,
      weight?: null
    ): NftStakedEventFilter;

    "NftUnstaked(address,uint256,address,uint256,uint256)"(
      staker?: null,
      cycle?: null,
      nft?: null,
      tokenId?: null,
      weight?: null
    ): NftUnstakedEventFilter;
    NftUnstaked(
      staker?: null,
      cycle?: null,
      nft?: null,
      tokenId?: null,
      weight?: null
    ): NftUnstakedEventFilter;

    "NftsBatchStaked(address,uint256,address,uint256[],uint256[])"(
      staker?: null,
      cycle?: null,
      nft?: null,
      tokenIds?: null,
      weights?: null
    ): NftsBatchStakedEventFilter;
    NftsBatchStaked(
      staker?: null,
      cycle?: null,
      nft?: null,
      tokenIds?: null,
      weights?: null
    ): NftsBatchStakedEventFilter;

    "NftsBatchUnstaked(address,uint256,address,uint256[],uint256[])"(
      staker?: null,
      cycle?: null,
      nft?: null,
      tokenIds?: null,
      weights?: null
    ): NftsBatchUnstakedEventFilter;
    NftsBatchUnstaked(
      staker?: null,
      cycle?: null,
      nft?: null,
      tokenIds?: null,
      weights?: null
    ): NftsBatchUnstakedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RewardsAdded(uint256,uint256,uint256)"(
      startPeriod?: null,
      endPeriod?: null,
      rewardsPerCycle?: null
    ): RewardsAddedEventFilter;
    RewardsAdded(
      startPeriod?: null,
      endPeriod?: null,
      rewardsPerCycle?: null
    ): RewardsAddedEventFilter;

    "RewardsClaimed(address,uint256,uint256,uint256,uint256)"(
      staker?: null,
      cycle?: null,
      startPeriod?: null,
      periods?: null,
      amount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      staker?: null,
      cycle?: null,
      startPeriod?: null,
      periods?: null,
      amount?: null
    ): RewardsClaimedEventFilter;

    "Started()"(): StartedEventFilter;
    Started(): StartedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    addRewardsForPeriods(
      startPeriod: BigNumberish,
      endPeriod: BigNumberish,
      rewardsPerCycle: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchUnstake(
      nft: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewards(
      maxPeriods: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    coin(overrides?: CallOverrides): Promise<BigNumber>;

    cycleLengthInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    enabled(overrides?: CallOverrides): Promise<BigNumber>;

    estimateRewards(
      maxPeriods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentCycle(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    globalHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastGlobalSnapshotIndex(overrides?: CallOverrides): Promise<BigNumber>;

    lastStakerSnapshotIndex(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextClaims(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      from: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      from: string,
      id: BigNumberish,
      amount: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      from: string,
      id: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    periodLengthInCycles(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardsSchedule(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakerHistories(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    staking(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalRewardsPool(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      nft: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLostCycleRewards(
      to: string,
      cycle: BigNumberish,
      globalSnapshotIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawnLostCycles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRewardsForPeriods(
      startPeriod: BigNumberish,
      endPeriod: BigNumberish,
      rewardsPerCycle: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchUnstake(
      nft: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      maxPeriods: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    coin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cycleLengthInSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimateRewards(
      maxPeriods: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentCycle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastGlobalSnapshotIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastStakerSnapshotIndex(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextClaims(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      from: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      from: string,
      id: BigNumberish,
      amount: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      from: string,
      id: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodLengthInCycles(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardsSchedule(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakerHistories(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    staking(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRewardsPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      nft: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLostCycleRewards(
      to: string,
      cycle: BigNumberish,
      globalSnapshotIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawnLostCycles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
