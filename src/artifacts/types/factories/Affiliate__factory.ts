/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Affiliate, AffiliateInterface } from "../Affiliate";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_coin",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "gas",
        type: "uint256",
      },
    ],
    name: "allowRewarding",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "coin",
    outputs: [
      {
        internalType: "contract ICoin",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "cont",
        type: "address",
      },
    ],
    name: "payoff",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "code",
        type: "string",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "affiliater",
        type: "address",
      },
    ],
    name: "release",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "code",
        type: "string",
      },
    ],
    name: "reward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610acf380380610acf83398101604081905261002f916100a6565b61003833610056565b6000805460ff60a01b191690556001600160a01b03166080526100d6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100b857600080fd5b81516001600160a01b03811681146100cf57600080fd5b9392505050565b6080516109d86100f76000396000818160b3015261023b01526109d86000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80635c975abb116100715780635c975abb1461015b578063715018a6146101785780638da5cb5b14610180578063c129422414610191578063f2c298be146101a4578063f2fde38b146101b757600080fd5b806311df9995146100ae57806319165587146100f257806327b0229e1461010757806327e235e31461012857806334a1134b14610148575b600080fd5b6100d57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101056101003660046107b0565b6101ca565b005b61011a6101153660046107e8565b61031a565b6040519081526020016100e9565b61011a6101363660046107b0565b60016020526000908152604090205481565b610105610156366004610899565b610456565b600054600160a01b900460ff1660405190151581526020016100e9565b6101056104e4565b6000546001600160a01b03166100d5565b61011a61019f3660046107b0565b61051a565b6101056101b23660046107e8565b61059c565b6101056101c53660046107b0565b6106a9565b6001600160a01b038116600090815260016020526040902054806102245760405162461bcd60e51b815260206004820152600c60248201526b7a65726f2062616c616e636560a01b60448201526064015b60405180910390fd5b6040516323b872dd60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301819052908416602483015260448201839052906323b872dd906064016020604051808303816000875af115801561029b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bf91906108c3565b6102ff5760405162461bcd60e51b815260206004820152601160248201527018dbdd5b19081b9bdd081899481c185a59607a1b604482015260640161021b565b506001600160a01b0316600090815260016020526040812055565b60008060028360405161032d91906108e5565b908152604051908190036020019020546001600160a01b031690508061038e5760405162461bcd60e51b8152602060048201526016602482015275696e76616c696420616666696c6961746520636f646560501b604482015260640161021b565b6001600160a01b03811660009081526004602052604090205460ff16156103ef5760405162461bcd60e51b8152602060048201526015602482015274185b1c9958591e481d5cd95908191a5cd8dbdd5b9d605a1b604482015260640161021b565b60006103fa3361051a565b6001600160a01b038316600090815260016020526040812080549293508392909190610427908490610936565b90915550506001600160a01b039091166000908152600460205260409020805460ff1916600117905592915050565b6000546001600160a01b031633146104805760405162461bcd60e51b815260040161021b9061094e565b6001600160a01b0382166104c85760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b604482015260640161021b565b6001600160a01b03909116600090815260036020526040902055565b6000546001600160a01b0316331461050e5760405162461bcd60e51b815260040161021b9061094e565b6105186000610744565b565b6001600160a01b0381166000908152600360205260408120546105725760405162461bcd60e51b815260206004820152601060248201526f34b73b30b634b2103932bbb0b93232b960811b604482015260640161021b565b6001600160a01b038216600090815260036020526040902054610596903a90610983565b92915050565b600081511180156105af57506014815111155b6105f15760405162461bcd60e51b81526020600482015260136024820152720d2dcecc2d8d2c840c6dec8ca40d8cadccee8d606b1b604482015260640161021b565b60006001600160a01b031660028260405161060c91906108e5565b908152604051908190036020019020546001600160a01b0316146106665760405162461bcd60e51b815260206004820152601160248201527018dbd91948185b1c9958591e481d5cd959607a1b604482015260640161021b565b3360028260405161067791906108e5565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b031990921691909117905550565b6000546001600160a01b031633146106d35760405162461bcd60e51b815260040161021b9061094e565b6001600160a01b0381166107385760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161021b565b61074181610744565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146107ab57600080fd5b919050565b6000602082840312156107c257600080fd5b6107cb82610794565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156107fa57600080fd5b813567ffffffffffffffff8082111561081257600080fd5b818401915084601f83011261082657600080fd5b813581811115610838576108386107d2565b604051601f8201601f19908116603f01168101908382118183101715610860576108606107d2565b8160405282815287602084870101111561087957600080fd5b826020860160208301376000928101602001929092525095945050505050565b600080604083850312156108ac57600080fd5b6108b583610794565b946020939093013593505050565b6000602082840312156108d557600080fd5b815180151581146107cb57600080fd5b6000825160005b8181101561090657602081860181015185830152016108ec565b81811115610915576000828501525b509190910192915050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561094957610949610920565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600081600019048311821515161561099d5761099d610920565b50029056fea2646970667358221220ff8596bef85d5eb754f793c57a8d9c076570e36c339adfcb53b92949d14b666a64736f6c634300080c0033";

type AffiliateConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AffiliateConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Affiliate__factory extends ContractFactory {
  constructor(...args: AffiliateConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Affiliate";
  }

  deploy(
    _coin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Affiliate> {
    return super.deploy(_coin, overrides || {}) as Promise<Affiliate>;
  }
  getDeployTransaction(
    _coin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_coin, overrides || {});
  }
  attach(address: string): Affiliate {
    return super.attach(address) as Affiliate;
  }
  connect(signer: Signer): Affiliate__factory {
    return super.connect(signer) as Affiliate__factory;
  }
  static readonly contractName: "Affiliate";
  public readonly contractName: "Affiliate";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AffiliateInterface {
    return new utils.Interface(_abi) as AffiliateInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Affiliate {
    return new Contract(address, _abi, signerOrProvider) as Affiliate;
  }
}
